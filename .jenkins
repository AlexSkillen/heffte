pipeline {
    agent none
    stages {
        stage('Automated testing') {
            when {
                not {
                    branch 'master'
                }
            }
            parallel {
                stage('GCC-CPU') {
                    agent {
                        dockerfile {
                            filename 'Dockerfile_fftw'
                            dir 'docker'
                            label 'docker'
                        }
                    }
                    steps {
                        sh '''rm -rf build && mkdir -p build && cd build &&
cmake \
    -DCMAKE_INSTALL_PREFIX=./HeffteInstall \
    -DCMAKE_BUILD_TYPE=Debug \
    -DCMAKE_CXX_FLAGS="-O3 -Wall -Wextra -Wshadow" \
    -DBUILD_SHARED_LIBS=ON \
    -DHeffte_ENABLE_FFTW=ON \
    -DHeffte_ENABLE_CUDA=OFF \
    -DHeffte_ENABLE_FORTRAN=ON \
    -DHeffte_ENABLE_PYTHON=ON \
    -DMPIEXEC_PREFLAGS="--allow-run-as-root" \
    .. &&
make -j4 &&
ctest -V --no-compress-output -T Test &&
make install &&
make test_install
                        '''
                    }
                    post {
                        always {
                            xunit([CTest(deleteOutputFiles: true, failIfNotNew: true, pattern: 'build/Testing/**/Test.xml', skipNoTestFiles: false, stopProcessingIfError: true)])
                        }
                    }
                }
                stage('GCC-CUDA') {
                    agent {
                        dockerfile {
                            filename 'Dockerfile_cuda'
                            dir 'docker'
                            label 'nvidia-docker'
                        }
                    }
                    steps {
                        sh '''rm -rf build && mkdir -p build && cd build &&
cmake \
    -DCMAKE_INSTALL_PREFIX=./HeffteInstall \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_CXX_FLAGS="-Wall -Wextra -Wshadow" \
    -DHeffte_ENABLE_FFTW=OFF \
    -DHeffte_ENABLE_CUDA=ON \
    -DMPIEXEC_PREFLAGS="--allow-run-as-root;--host;localhost:12" \
    .. &&
make -j4 &&
ctest -V --no-compress-output -T Test &&
make install &&
make test_install
                        '''
                    }
                    post {
                        always {
                            xunit([CTest(deleteOutputFiles: true, failIfNotNew: true, pattern: 'build/Testing/**/Test.xml', skipNoTestFiles: false, stopProcessingIfError: true)])
                        }
                    }
                }
            }
        }
    }
}
